<?php
/**
 * ProductDataStatusResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  KauflandSellerApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kaufland.de Seller API v2
 *
 * This is the Kaufland.de Seller API v2. You can find more information on [https://sellerapi.kaufland.com/](https://sellerapi.kaufland.com/)
 *
 * The version of the OpenAPI document: 2.17.2
 * Contact: seller-api-support@kaufland-online.de
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KauflandSellerApi\Model;

use \ArrayAccess;
use \KauflandSellerApi\ObjectSerializer;

/**
 * ProductDataStatusResponse Class Doc Comment
 *
 * @category Class
 * @package  KauflandSellerApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductDataStatusResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductDataStatusResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'product_ready' => 'bool',
        'update_status' => '\KauflandSellerApi\Model\ProductDataStatus',
        'id_product' => 'int',
        'product_not_ready_reason' => '\KauflandSellerApi\Model\ProductDataStatusProductNotReadyReason',
        'update_fail_reason' => '\KauflandSellerApi\Model\ProductDataStatusUpdateFailReason',
        'attribute_values' => '\KauflandSellerApi\Model\ProductDataStatusAttribute[]',
        'missing_attributes' => 'string[]',
        'min_one_missing_attributes' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'product_ready' => null,
        'update_status' => null,
        'id_product' => 'int64',
        'product_not_ready_reason' => null,
        'update_fail_reason' => null,
        'attribute_values' => null,
        'missing_attributes' => null,
        'min_one_missing_attributes' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'product_ready' => false,
        'update_status' => false,
        'id_product' => true,
        'product_not_ready_reason' => true,
        'update_fail_reason' => true,
        'attribute_values' => true,
        'missing_attributes' => true,
        'min_one_missing_attributes' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'product_ready' => 'product_ready',
        'update_status' => 'update_status',
        'id_product' => 'id_product',
        'product_not_ready_reason' => 'product_not_ready_reason',
        'update_fail_reason' => 'update_fail_reason',
        'attribute_values' => 'attribute_values',
        'missing_attributes' => 'missing_attributes',
        'min_one_missing_attributes' => 'min_one_missing_attributes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'product_ready' => 'setProductReady',
        'update_status' => 'setUpdateStatus',
        'id_product' => 'setIdProduct',
        'product_not_ready_reason' => 'setProductNotReadyReason',
        'update_fail_reason' => 'setUpdateFailReason',
        'attribute_values' => 'setAttributeValues',
        'missing_attributes' => 'setMissingAttributes',
        'min_one_missing_attributes' => 'setMinOneMissingAttributes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'product_ready' => 'getProductReady',
        'update_status' => 'getUpdateStatus',
        'id_product' => 'getIdProduct',
        'product_not_ready_reason' => 'getProductNotReadyReason',
        'update_fail_reason' => 'getUpdateFailReason',
        'attribute_values' => 'getAttributeValues',
        'missing_attributes' => 'getMissingAttributes',
        'min_one_missing_attributes' => 'getMinOneMissingAttributes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('product_ready', $data ?? [], null);
        $this->setIfExists('update_status', $data ?? [], null);
        $this->setIfExists('id_product', $data ?? [], null);
        $this->setIfExists('product_not_ready_reason', $data ?? [], null);
        $this->setIfExists('update_fail_reason', $data ?? [], null);
        $this->setIfExists('attribute_values', $data ?? [], null);
        $this->setIfExists('missing_attributes', $data ?? [], null);
        $this->setIfExists('min_one_missing_attributes', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['product_ready'] === null) {
            $invalidProperties[] = "'product_ready' can't be null";
        }
        if ($this->container['update_status'] === null) {
            $invalidProperties[] = "'update_status' can't be null";
        }
        if ($this->container['id_product'] === null) {
            $invalidProperties[] = "'id_product' can't be null";
        }
        if (($this->container['id_product'] < 1)) {
            $invalidProperties[] = "invalid value for 'id_product', must be bigger than or equal to 1.";
        }

        if ($this->container['product_not_ready_reason'] === null) {
            $invalidProperties[] = "'product_not_ready_reason' can't be null";
        }
        if ($this->container['update_fail_reason'] === null) {
            $invalidProperties[] = "'update_fail_reason' can't be null";
        }
        if ($this->container['attribute_values'] === null) {
            $invalidProperties[] = "'attribute_values' can't be null";
        }
        if ($this->container['missing_attributes'] === null) {
            $invalidProperties[] = "'missing_attributes' can't be null";
        }
        if ($this->container['min_one_missing_attributes'] === null) {
            $invalidProperties[] = "'min_one_missing_attributes' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets product_ready
     *
     * @return bool
     */
    public function getProductReady()
    {
        return $this->container['product_ready'];
    }

    /**
     * Sets product_ready
     *
     * @param bool $product_ready product_ready
     *
     * @return self
     */
    public function setProductReady($product_ready)
    {
        if (is_null($product_ready)) {
            throw new \InvalidArgumentException('non-nullable product_ready cannot be null');
        }
        $this->container['product_ready'] = $product_ready;

        return $this;
    }

    /**
     * Gets update_status
     *
     * @return \KauflandSellerApi\Model\ProductDataStatus
     */
    public function getUpdateStatus()
    {
        return $this->container['update_status'];
    }

    /**
     * Sets update_status
     *
     * @param \KauflandSellerApi\Model\ProductDataStatus $update_status update_status
     *
     * @return self
     */
    public function setUpdateStatus($update_status)
    {
        if (is_null($update_status)) {
            throw new \InvalidArgumentException('non-nullable update_status cannot be null');
        }
        $this->container['update_status'] = $update_status;

        return $this;
    }

    /**
     * Gets id_product
     *
     * @return int
     */
    public function getIdProduct()
    {
        return $this->container['id_product'];
    }

    /**
     * Sets id_product
     *
     * @param int $id_product id_product
     *
     * @return self
     */
    public function setIdProduct($id_product)
    {
        if (is_null($id_product)) {
            array_push($this->openAPINullablesSetToNull, 'id_product');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id_product', $nullablesSetToNull, true);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($id_product) && ($id_product < 1)) {
            throw new \InvalidArgumentException('invalid value for $id_product when calling ProductDataStatusResponse., must be bigger than or equal to 1.');
        }

        $this->container['id_product'] = $id_product;

        return $this;
    }

    /**
     * Gets product_not_ready_reason
     *
     * @return \KauflandSellerApi\Model\ProductDataStatusProductNotReadyReason
     */
    public function getProductNotReadyReason()
    {
        return $this->container['product_not_ready_reason'];
    }

    /**
     * Sets product_not_ready_reason
     *
     * @param \KauflandSellerApi\Model\ProductDataStatusProductNotReadyReason $product_not_ready_reason product_not_ready_reason
     *
     * @return self
     */
    public function setProductNotReadyReason($product_not_ready_reason)
    {
        if (is_null($product_not_ready_reason)) {
            array_push($this->openAPINullablesSetToNull, 'product_not_ready_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_not_ready_reason', $nullablesSetToNull, true);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product_not_ready_reason'] = $product_not_ready_reason;

        return $this;
    }

    /**
     * Gets update_fail_reason
     *
     * @return \KauflandSellerApi\Model\ProductDataStatusUpdateFailReason
     */
    public function getUpdateFailReason()
    {
        return $this->container['update_fail_reason'];
    }

    /**
     * Sets update_fail_reason
     *
     * @param \KauflandSellerApi\Model\ProductDataStatusUpdateFailReason $update_fail_reason update_fail_reason
     *
     * @return self
     */
    public function setUpdateFailReason($update_fail_reason)
    {
        if (is_null($update_fail_reason)) {
            array_push($this->openAPINullablesSetToNull, 'update_fail_reason');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('update_fail_reason', $nullablesSetToNull, true);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['update_fail_reason'] = $update_fail_reason;

        return $this;
    }

    /**
     * Gets attribute_values
     *
     * @return \KauflandSellerApi\Model\ProductDataStatusAttribute[]
     */
    public function getAttributeValues()
    {
        return $this->container['attribute_values'];
    }

    /**
     * Sets attribute_values
     *
     * @param \KauflandSellerApi\Model\ProductDataStatusAttribute[] $attribute_values attribute_values
     *
     * @return self
     */
    public function setAttributeValues($attribute_values)
    {
        if (is_null($attribute_values)) {
            array_push($this->openAPINullablesSetToNull, 'attribute_values');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('attribute_values', $nullablesSetToNull, true);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['attribute_values'] = $attribute_values;

        return $this;
    }

    /**
     * Gets missing_attributes
     *
     * @return string[]
     */
    public function getMissingAttributes()
    {
        return $this->container['missing_attributes'];
    }

    /**
     * Sets missing_attributes
     *
     * @param string[] $missing_attributes missing_attributes
     *
     * @return self
     */
    public function setMissingAttributes($missing_attributes)
    {
        if (is_null($missing_attributes)) {
            array_push($this->openAPINullablesSetToNull, 'missing_attributes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('missing_attributes', $nullablesSetToNull, true);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['missing_attributes'] = $missing_attributes;

        return $this;
    }

    /**
     * Gets min_one_missing_attributes
     *
     * @return string[]
     */
    public function getMinOneMissingAttributes()
    {
        return $this->container['min_one_missing_attributes'];
    }

    /**
     * Sets min_one_missing_attributes
     *
     * @param string[] $min_one_missing_attributes min_one_missing_attributes
     *
     * @return self
     */
    public function setMinOneMissingAttributes($min_one_missing_attributes)
    {
        if (is_null($min_one_missing_attributes)) {
            array_push($this->openAPINullablesSetToNull, 'min_one_missing_attributes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('min_one_missing_attributes', $nullablesSetToNull, true);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['min_one_missing_attributes'] = $min_one_missing_attributes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

