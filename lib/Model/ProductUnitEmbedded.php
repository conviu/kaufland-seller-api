<?php
/**
 * ProductUnitEmbedded
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  KauflandSellerApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Kaufland.de Seller API v2
 *
 * This is the Kaufland.de Seller API v2. You can find more information on [https://sellerapi.kaufland.com/](https://sellerapi.kaufland.com/)
 *
 * The version of the OpenAPI document: 2.14.1
 * Contact: seller-api-support@kaufland-online.de
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.5.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace KauflandSellerApi\Model;

use \ArrayAccess;
use \KauflandSellerApi\ObjectSerializer;

/**
 * ProductUnitEmbedded Class Doc Comment
 *
 * @category Class
 * @description Used only for swagger documentation. Actual response comes from the shop api response
 * @package  KauflandSellerApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ProductUnitEmbedded implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ProductUnitEmbedded';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id_unit' => 'int',
        'id_product' => 'int',
        'condition' => '\KauflandSellerApi\Model\UnitCondition',
        'location' => 'string',
        'warehouse' => 'string',
        'amount' => 'int',
        'price' => 'int',
        'delivery_time_min' => 'int',
        'delivery_time_max' => 'int',
        'shipping_group' => 'string',
        'note' => 'string',
        'seller' => '\KauflandSellerApi\Model\ProductUnitEmbeddedSeller',
        'reference_price' => 'int',
        'shipping_rate' => 'int',
        'date_inserted' => '\DateTime',
        'date_lastchange' => '\DateTime',
        'fulfillment_type' => '\KauflandSellerApi\Model\FulfillmentType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id_unit' => 'int64',
        'id_product' => 'int64',
        'condition' => null,
        'location' => null,
        'warehouse' => null,
        'amount' => 'int32',
        'price' => 'int32',
        'delivery_time_min' => 'int32',
        'delivery_time_max' => 'int32',
        'shipping_group' => null,
        'note' => null,
        'seller' => null,
        'reference_price' => 'int32',
        'shipping_rate' => 'int32',
        'date_inserted' => 'date-time',
        'date_lastchange' => 'date-time',
        'fulfillment_type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id_unit' => false,
        'id_product' => false,
        'condition' => false,
        'location' => true,
        'warehouse' => true,
        'amount' => false,
        'price' => false,
        'delivery_time_min' => false,
        'delivery_time_max' => false,
        'shipping_group' => true,
        'note' => true,
        'seller' => true,
        'reference_price' => true,
        'shipping_rate' => false,
        'date_inserted' => false,
        'date_lastchange' => true,
        'fulfillment_type' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id_unit' => 'id_unit',
        'id_product' => 'id_product',
        'condition' => 'condition',
        'location' => 'location',
        'warehouse' => 'warehouse',
        'amount' => 'amount',
        'price' => 'price',
        'delivery_time_min' => 'delivery_time_min',
        'delivery_time_max' => 'delivery_time_max',
        'shipping_group' => 'shipping_group',
        'note' => 'note',
        'seller' => 'seller',
        'reference_price' => 'reference_price',
        'shipping_rate' => 'shipping_rate',
        'date_inserted' => 'date_inserted',
        'date_lastchange' => 'date_lastchange',
        'fulfillment_type' => 'fulfillment_type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id_unit' => 'setIdUnit',
        'id_product' => 'setIdProduct',
        'condition' => 'setCondition',
        'location' => 'setLocation',
        'warehouse' => 'setWarehouse',
        'amount' => 'setAmount',
        'price' => 'setPrice',
        'delivery_time_min' => 'setDeliveryTimeMin',
        'delivery_time_max' => 'setDeliveryTimeMax',
        'shipping_group' => 'setShippingGroup',
        'note' => 'setNote',
        'seller' => 'setSeller',
        'reference_price' => 'setReferencePrice',
        'shipping_rate' => 'setShippingRate',
        'date_inserted' => 'setDateInserted',
        'date_lastchange' => 'setDateLastchange',
        'fulfillment_type' => 'setFulfillmentType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id_unit' => 'getIdUnit',
        'id_product' => 'getIdProduct',
        'condition' => 'getCondition',
        'location' => 'getLocation',
        'warehouse' => 'getWarehouse',
        'amount' => 'getAmount',
        'price' => 'getPrice',
        'delivery_time_min' => 'getDeliveryTimeMin',
        'delivery_time_max' => 'getDeliveryTimeMax',
        'shipping_group' => 'getShippingGroup',
        'note' => 'getNote',
        'seller' => 'getSeller',
        'reference_price' => 'getReferencePrice',
        'shipping_rate' => 'getShippingRate',
        'date_inserted' => 'getDateInserted',
        'date_lastchange' => 'getDateLastchange',
        'fulfillment_type' => 'getFulfillmentType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id_unit', $data ?? [], null);
        $this->setIfExists('id_product', $data ?? [], null);
        $this->setIfExists('condition', $data ?? [], null);
        $this->setIfExists('location', $data ?? [], null);
        $this->setIfExists('warehouse', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('delivery_time_min', $data ?? [], null);
        $this->setIfExists('delivery_time_max', $data ?? [], null);
        $this->setIfExists('shipping_group', $data ?? [], null);
        $this->setIfExists('note', $data ?? [], null);
        $this->setIfExists('seller', $data ?? [], null);
        $this->setIfExists('reference_price', $data ?? [], null);
        $this->setIfExists('shipping_rate', $data ?? [], null);
        $this->setIfExists('date_inserted', $data ?? [], null);
        $this->setIfExists('date_lastchange', $data ?? [], null);
        $this->setIfExists('fulfillment_type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id_unit'] === null) {
            $invalidProperties[] = "'id_unit' can't be null";
        }
        if (($this->container['id_unit'] < 1)) {
            $invalidProperties[] = "invalid value for 'id_unit', must be bigger than or equal to 1.";
        }

        if ($this->container['id_product'] === null) {
            $invalidProperties[] = "'id_product' can't be null";
        }
        if (($this->container['id_product'] < 1)) {
            $invalidProperties[] = "invalid value for 'id_product', must be bigger than or equal to 1.";
        }

        if ($this->container['condition'] === null) {
            $invalidProperties[] = "'condition' can't be null";
        }
        if ($this->container['location'] === null) {
            $invalidProperties[] = "'location' can't be null";
        }
        if ($this->container['warehouse'] === null) {
            $invalidProperties[] = "'warehouse' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if (($this->container['amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'amount', must be bigger than or equal to 0.";
        }

        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if (($this->container['price'] < 1)) {
            $invalidProperties[] = "invalid value for 'price', must be bigger than or equal to 1.";
        }

        if ($this->container['delivery_time_min'] === null) {
            $invalidProperties[] = "'delivery_time_min' can't be null";
        }
        if (($this->container['delivery_time_min'] < 1)) {
            $invalidProperties[] = "invalid value for 'delivery_time_min', must be bigger than or equal to 1.";
        }

        if ($this->container['delivery_time_max'] === null) {
            $invalidProperties[] = "'delivery_time_max' can't be null";
        }
        if (($this->container['delivery_time_max'] < 1)) {
            $invalidProperties[] = "invalid value for 'delivery_time_max', must be bigger than or equal to 1.";
        }

        if ($this->container['shipping_group'] === null) {
            $invalidProperties[] = "'shipping_group' can't be null";
        }
        if ($this->container['note'] === null) {
            $invalidProperties[] = "'note' can't be null";
        }
        if ($this->container['seller'] === null) {
            $invalidProperties[] = "'seller' can't be null";
        }
        if ($this->container['reference_price'] === null) {
            $invalidProperties[] = "'reference_price' can't be null";
        }
        if (($this->container['reference_price'] < 1)) {
            $invalidProperties[] = "invalid value for 'reference_price', must be bigger than or equal to 1.";
        }

        if ($this->container['shipping_rate'] === null) {
            $invalidProperties[] = "'shipping_rate' can't be null";
        }
        if (($this->container['shipping_rate'] < 0)) {
            $invalidProperties[] = "invalid value for 'shipping_rate', must be bigger than or equal to 0.";
        }

        if ($this->container['date_inserted'] === null) {
            $invalidProperties[] = "'date_inserted' can't be null";
        }
        if ($this->container['date_lastchange'] === null) {
            $invalidProperties[] = "'date_lastchange' can't be null";
        }
        if ($this->container['fulfillment_type'] === null) {
            $invalidProperties[] = "'fulfillment_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets id_unit
     *
     * @return int
     */
    public function getIdUnit()
    {
        return $this->container['id_unit'];
    }

    /**
     * Sets id_unit
     *
     * @param int $id_unit id_unit
     *
     * @return self
     */
    public function setIdUnit($id_unit)
    {
        if (is_null($id_unit)) {
            throw new \InvalidArgumentException('non-nullable id_unit cannot be null');
        }

        if (($id_unit < 1)) {
            throw new \InvalidArgumentException('invalid value for $id_unit when calling ProductUnitEmbedded., must be bigger than or equal to 1.');
        }

        $this->container['id_unit'] = $id_unit;

        return $this;
    }

    /**
     * Gets id_product
     *
     * @return int
     */
    public function getIdProduct()
    {
        return $this->container['id_product'];
    }

    /**
     * Sets id_product
     *
     * @param int $id_product id_product
     *
     * @return self
     */
    public function setIdProduct($id_product)
    {
        if (is_null($id_product)) {
            throw new \InvalidArgumentException('non-nullable id_product cannot be null');
        }

        if (($id_product < 1)) {
            throw new \InvalidArgumentException('invalid value for $id_product when calling ProductUnitEmbedded., must be bigger than or equal to 1.');
        }

        $this->container['id_product'] = $id_product;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return \KauflandSellerApi\Model\UnitCondition
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param \KauflandSellerApi\Model\UnitCondition $condition condition
     *
     * @return self
     */
    public function setCondition($condition)
    {
        if (is_null($condition)) {
            throw new \InvalidArgumentException('non-nullable condition cannot be null');
        }
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location Warehouse location
     *
     * @return self
     */
    public function setLocation($location)
    {
        if (is_null($location)) {
            array_push($this->openAPINullablesSetToNull, 'location');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location', $nullablesSetToNull, true);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets warehouse
     *
     * @return string
     */
    public function getWarehouse()
    {
        return $this->container['warehouse'];
    }

    /**
     * Sets warehouse
     *
     * @param string $warehouse Warehouse name
     *
     * @return self
     */
    public function setWarehouse($warehouse)
    {
        if (is_null($warehouse)) {
            array_push($this->openAPINullablesSetToNull, 'warehouse');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('warehouse', $nullablesSetToNull, true);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['warehouse'] = $warehouse;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }

        if (($amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling ProductUnitEmbedded., must be bigger than or equal to 0.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets price
     *
     * @return int
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param int $price Price at which this unit will be offered on Kaufland.de
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }

        if (($price < 1)) {
            throw new \InvalidArgumentException('invalid value for $price when calling ProductUnitEmbedded., must be bigger than or equal to 1.');
        }

        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets delivery_time_min
     *
     * @return int
     */
    public function getDeliveryTimeMin()
    {
        return $this->container['delivery_time_min'];
    }

    /**
     * Sets delivery_time_min
     *
     * @param int $delivery_time_min delivery_time_min
     *
     * @return self
     */
    public function setDeliveryTimeMin($delivery_time_min)
    {
        if (is_null($delivery_time_min)) {
            throw new \InvalidArgumentException('non-nullable delivery_time_min cannot be null');
        }

        if (($delivery_time_min < 1)) {
            throw new \InvalidArgumentException('invalid value for $delivery_time_min when calling ProductUnitEmbedded., must be bigger than or equal to 1.');
        }

        $this->container['delivery_time_min'] = $delivery_time_min;

        return $this;
    }

    /**
     * Gets delivery_time_max
     *
     * @return int
     */
    public function getDeliveryTimeMax()
    {
        return $this->container['delivery_time_max'];
    }

    /**
     * Sets delivery_time_max
     *
     * @param int $delivery_time_max delivery_time_max
     *
     * @return self
     */
    public function setDeliveryTimeMax($delivery_time_max)
    {
        if (is_null($delivery_time_max)) {
            throw new \InvalidArgumentException('non-nullable delivery_time_max cannot be null');
        }

        if (($delivery_time_max < 1)) {
            throw new \InvalidArgumentException('invalid value for $delivery_time_max when calling ProductUnitEmbedded., must be bigger than or equal to 1.');
        }

        $this->container['delivery_time_max'] = $delivery_time_max;

        return $this;
    }

    /**
     * Gets shipping_group
     *
     * @return string
     */
    public function getShippingGroup()
    {
        return $this->container['shipping_group'];
    }

    /**
     * Sets shipping_group
     *
     * @param string $shipping_group Shipping group name
     *
     * @return self
     */
    public function setShippingGroup($shipping_group)
    {
        if (is_null($shipping_group)) {
            array_push($this->openAPINullablesSetToNull, 'shipping_group');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('shipping_group', $nullablesSetToNull, true);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['shipping_group'] = $shipping_group;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note A note for this unit
     *
     * @return self
     */
    public function setNote($note)
    {
        if (is_null($note)) {
            array_push($this->openAPINullablesSetToNull, 'note');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('note', $nullablesSetToNull, true);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets seller
     *
     * @return \KauflandSellerApi\Model\ProductUnitEmbeddedSeller
     */
    public function getSeller()
    {
        return $this->container['seller'];
    }

    /**
     * Sets seller
     *
     * @param \KauflandSellerApi\Model\ProductUnitEmbeddedSeller $seller seller
     *
     * @return self
     */
    public function setSeller($seller)
    {
        if (is_null($seller)) {
            array_push($this->openAPINullablesSetToNull, 'seller');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('seller', $nullablesSetToNull, true);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['seller'] = $seller;

        return $this;
    }

    /**
     * Gets reference_price
     *
     * @return int
     */
    public function getReferencePrice()
    {
        return $this->container['reference_price'];
    }

    /**
     * Sets reference_price
     *
     * @param int $reference_price reference_price
     *
     * @return self
     */
    public function setReferencePrice($reference_price)
    {
        if (is_null($reference_price)) {
            array_push($this->openAPINullablesSetToNull, 'reference_price');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference_price', $nullablesSetToNull, true);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($reference_price) && ($reference_price < 1)) {
            throw new \InvalidArgumentException('invalid value for $reference_price when calling ProductUnitEmbedded., must be bigger than or equal to 1.');
        }

        $this->container['reference_price'] = $reference_price;

        return $this;
    }

    /**
     * Gets shipping_rate
     *
     * @return int
     */
    public function getShippingRate()
    {
        return $this->container['shipping_rate'];
    }

    /**
     * Sets shipping_rate
     *
     * @param int $shipping_rate shipping_rate
     *
     * @return self
     */
    public function setShippingRate($shipping_rate)
    {
        if (is_null($shipping_rate)) {
            throw new \InvalidArgumentException('non-nullable shipping_rate cannot be null');
        }

        if (($shipping_rate < 0)) {
            throw new \InvalidArgumentException('invalid value for $shipping_rate when calling ProductUnitEmbedded., must be bigger than or equal to 0.');
        }

        $this->container['shipping_rate'] = $shipping_rate;

        return $this;
    }

    /**
     * Gets date_inserted
     *
     * @return \DateTime
     */
    public function getDateInserted()
    {
        return $this->container['date_inserted'];
    }

    /**
     * Sets date_inserted
     *
     * @param \DateTime $date_inserted date_inserted
     *
     * @return self
     */
    public function setDateInserted($date_inserted)
    {
        if (is_null($date_inserted)) {
            throw new \InvalidArgumentException('non-nullable date_inserted cannot be null');
        }
        $this->container['date_inserted'] = $date_inserted;

        return $this;
    }

    /**
     * Gets date_lastchange
     *
     * @return \DateTime
     */
    public function getDateLastchange()
    {
        return $this->container['date_lastchange'];
    }

    /**
     * Sets date_lastchange
     *
     * @param \DateTime $date_lastchange date_lastchange
     *
     * @return self
     */
    public function setDateLastchange($date_lastchange)
    {
        if (is_null($date_lastchange)) {
            array_push($this->openAPINullablesSetToNull, 'date_lastchange');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_lastchange', $nullablesSetToNull, true);
            if ($index !== false) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_lastchange'] = $date_lastchange;

        return $this;
    }

    /**
     * Gets fulfillment_type
     *
     * @return \KauflandSellerApi\Model\FulfillmentType
     */
    public function getFulfillmentType()
    {
        return $this->container['fulfillment_type'];
    }

    /**
     * Sets fulfillment_type
     *
     * @param \KauflandSellerApi\Model\FulfillmentType $fulfillment_type fulfillment_type
     *
     * @return self
     */
    public function setFulfillmentType($fulfillment_type)
    {
        if (is_null($fulfillment_type)) {
            throw new \InvalidArgumentException('non-nullable fulfillment_type cannot be null');
        }
        $this->container['fulfillment_type'] = $fulfillment_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
        return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

